/**
 * We need a way to debug play with specific walls, so...
 */
const WallHack = {
  hacks: {
    self_drawn_win_clean: [
      1,1,1,   2,2,2,   3,3,3,   4,4,4,      5, // p0
      16,16,16,17,17,17,18,18,18,19,19,19,  27, // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  15, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      5 // p0 win
    ],

    self_drawn_win: [
      1,1,1,  23,23,23,  2,3,4,   24,24,24,  5, // p0
      16,16,16,17,17,17,18,18,18,19,19,19,  27, // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  15, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      5 // p0 win
    ],

    kong_in_initial_deal: [
      1,1,1,     2,2,2,     3,3,3,     4,4,4,4, // p0
      16,16,16,17,17,17,18,18,18,19,19,19,   5, // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  15, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      5, // p0 supplement
      5  // p0 win
    ],

    kong_from_first_discard: [
      1,1,1,   2,2,2,   3,3,3,   4,4,4,      5, // p0
      16,16,16,17,17,17,18,18,18,19,19,19,   4, // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  15, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      16, // p1 kong
      5   // p0 win
    ],

    chow_by_player_1: [
      1,1,1,   2,2,2,   3,3,3,   4,4,4,      5, // p0
      16,16,16,17,17,17,20,20,20, 23,24,26,  5, // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  26, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      25 // chow for p1
    ],

    all_bonus_to_player: [
      34,35,36,37,38,39,40,41,                  // p0 bonus tiles
      1,1,24,2,2,26,3,3,28,4,4,30,5,            // p0
      16,16,16,17,17,17,18,18,18,19,19,19,   5, // p0
      11,11,11,12,12,12,13,13,13,14,14,14,  26, // p0
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p0
    ],

    thirteen_orphans: [
      0,8,9,17,18,26,27,28,29,30,31,32,33,    // p0
      16,16,16,17,17,17,18,18,18,19,19,19,5,  // p1
      11,11,11,12,12,12,13,13,13,14,14,14,26, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,10,             // p3
      27 // p0 win
    ],

    all_green: [
      1,2,3,   2,2,2,   5,5,5,   7,7,7,     31, // p0
      16,16,16,17,17,17,18,18,18,19,19,19,   5, // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  26, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      31 // p0 win (pair)
    ],

    nine_gates: [
      0,0,0, 1,2,3,4,5,6,7, 8,8,8,              // p0
      16,16,16,17,17,17,18,18,18,19,19,19,  5,  // p1
      11,11,11,12,12,12,13,13,13,14,14,14,  26, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      3 // p0 win
    ],

    little_three_dragons: [
      1,1,1,  23,23,23,  2,3,4,  24,24,24,   5, // p0
      31,31,31,32,32,32,33,33,18,19,19,19,  27, // p1, pung of green, pung of red, pair of white
      11,11,11,12,12,12,13,13,13,14,14,14,  15, // p2
      6,6,6,7,7,7,8,8,8,9,9,9,              10, // p3
      5 // p0 win
    ]
  },

  set(wall, tiles) {
    tiles = tiles.slice();
    let base = wall.getBase();
    tiles.forEach(tile => base.splice(base.indexOf(tile),1));
    wall.tiles = tiles.concat(wall.shuffle(base));
  }
};
